// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: addressbook.proto
#ifndef GRPC_addressbook_2eproto__INCLUDED
#define GRPC_addressbook_2eproto__INCLUDED

#include "addressbook.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace tutorial {

class Greeter final {
 public:
  static constexpr char const* service_full_name() {
    return "tutorial.Greeter";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetPerson(::grpc::ClientContext* context, const ::tutorial::PersonRequest& request, ::tutorial::Person* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tutorial::Person>> AsyncGetPerson(::grpc::ClientContext* context, const ::tutorial::PersonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tutorial::Person>>(AsyncGetPersonRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tutorial::Person>> PrepareAsyncGetPerson(::grpc::ClientContext* context, const ::tutorial::PersonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tutorial::Person>>(PrepareAsyncGetPersonRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::tutorial::Person>> ListPersons(::grpc::ClientContext* context, const ::tutorial::PersonRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::tutorial::Person>>(ListPersonsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tutorial::Person>> AsyncListPersons(::grpc::ClientContext* context, const ::tutorial::PersonRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tutorial::Person>>(AsyncListPersonsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tutorial::Person>> PrepareAsyncListPersons(::grpc::ClientContext* context, const ::tutorial::PersonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tutorial::Person>>(PrepareAsyncListPersonsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetPerson(::grpc::ClientContext* context, const ::tutorial::PersonRequest* request, ::tutorial::Person* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPerson(::grpc::ClientContext* context, const ::tutorial::PersonRequest* request, ::tutorial::Person* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListPersons(::grpc::ClientContext* context, const ::tutorial::PersonRequest* request, ::grpc::ClientReadReactor< ::tutorial::Person>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tutorial::Person>* AsyncGetPersonRaw(::grpc::ClientContext* context, const ::tutorial::PersonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tutorial::Person>* PrepareAsyncGetPersonRaw(::grpc::ClientContext* context, const ::tutorial::PersonRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::tutorial::Person>* ListPersonsRaw(::grpc::ClientContext* context, const ::tutorial::PersonRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tutorial::Person>* AsyncListPersonsRaw(::grpc::ClientContext* context, const ::tutorial::PersonRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tutorial::Person>* PrepareAsyncListPersonsRaw(::grpc::ClientContext* context, const ::tutorial::PersonRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetPerson(::grpc::ClientContext* context, const ::tutorial::PersonRequest& request, ::tutorial::Person* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tutorial::Person>> AsyncGetPerson(::grpc::ClientContext* context, const ::tutorial::PersonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tutorial::Person>>(AsyncGetPersonRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tutorial::Person>> PrepareAsyncGetPerson(::grpc::ClientContext* context, const ::tutorial::PersonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tutorial::Person>>(PrepareAsyncGetPersonRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::tutorial::Person>> ListPersons(::grpc::ClientContext* context, const ::tutorial::PersonRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::tutorial::Person>>(ListPersonsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tutorial::Person>> AsyncListPersons(::grpc::ClientContext* context, const ::tutorial::PersonRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tutorial::Person>>(AsyncListPersonsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tutorial::Person>> PrepareAsyncListPersons(::grpc::ClientContext* context, const ::tutorial::PersonRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tutorial::Person>>(PrepareAsyncListPersonsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetPerson(::grpc::ClientContext* context, const ::tutorial::PersonRequest* request, ::tutorial::Person* response, std::function<void(::grpc::Status)>) override;
      void GetPerson(::grpc::ClientContext* context, const ::tutorial::PersonRequest* request, ::tutorial::Person* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListPersons(::grpc::ClientContext* context, const ::tutorial::PersonRequest* request, ::grpc::ClientReadReactor< ::tutorial::Person>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::tutorial::Person>* AsyncGetPersonRaw(::grpc::ClientContext* context, const ::tutorial::PersonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tutorial::Person>* PrepareAsyncGetPersonRaw(::grpc::ClientContext* context, const ::tutorial::PersonRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::tutorial::Person>* ListPersonsRaw(::grpc::ClientContext* context, const ::tutorial::PersonRequest& request) override;
    ::grpc::ClientAsyncReader< ::tutorial::Person>* AsyncListPersonsRaw(::grpc::ClientContext* context, const ::tutorial::PersonRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::tutorial::Person>* PrepareAsyncListPersonsRaw(::grpc::ClientContext* context, const ::tutorial::PersonRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetPerson_;
    const ::grpc::internal::RpcMethod rpcmethod_ListPersons_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetPerson(::grpc::ServerContext* context, const ::tutorial::PersonRequest* request, ::tutorial::Person* response);
    virtual ::grpc::Status ListPersons(::grpc::ServerContext* context, const ::tutorial::PersonRequest* request, ::grpc::ServerWriter< ::tutorial::Person>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPerson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPerson() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetPerson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPerson(::grpc::ServerContext* /*context*/, const ::tutorial::PersonRequest* /*request*/, ::tutorial::Person* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPerson(::grpc::ServerContext* context, ::tutorial::PersonRequest* request, ::grpc::ServerAsyncResponseWriter< ::tutorial::Person>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListPersons : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListPersons() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListPersons() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPersons(::grpc::ServerContext* /*context*/, const ::tutorial::PersonRequest* /*request*/, ::grpc::ServerWriter< ::tutorial::Person>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListPersons(::grpc::ServerContext* context, ::tutorial::PersonRequest* request, ::grpc::ServerAsyncWriter< ::tutorial::Person>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetPerson<WithAsyncMethod_ListPersons<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetPerson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPerson() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::tutorial::PersonRequest, ::tutorial::Person>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tutorial::PersonRequest* request, ::tutorial::Person* response) { return this->GetPerson(context, request, response); }));}
    void SetMessageAllocatorFor_GetPerson(
        ::grpc::MessageAllocator< ::tutorial::PersonRequest, ::tutorial::Person>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tutorial::PersonRequest, ::tutorial::Person>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPerson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPerson(::grpc::ServerContext* /*context*/, const ::tutorial::PersonRequest* /*request*/, ::tutorial::Person* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPerson(
      ::grpc::CallbackServerContext* /*context*/, const ::tutorial::PersonRequest* /*request*/, ::tutorial::Person* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListPersons : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListPersons() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::tutorial::PersonRequest, ::tutorial::Person>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tutorial::PersonRequest* request) { return this->ListPersons(context, request); }));
    }
    ~WithCallbackMethod_ListPersons() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPersons(::grpc::ServerContext* /*context*/, const ::tutorial::PersonRequest* /*request*/, ::grpc::ServerWriter< ::tutorial::Person>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::tutorial::Person>* ListPersons(
      ::grpc::CallbackServerContext* /*context*/, const ::tutorial::PersonRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetPerson<WithCallbackMethod_ListPersons<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetPerson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPerson() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetPerson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPerson(::grpc::ServerContext* /*context*/, const ::tutorial::PersonRequest* /*request*/, ::tutorial::Person* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListPersons : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListPersons() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListPersons() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPersons(::grpc::ServerContext* /*context*/, const ::tutorial::PersonRequest* /*request*/, ::grpc::ServerWriter< ::tutorial::Person>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPerson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPerson() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetPerson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPerson(::grpc::ServerContext* /*context*/, const ::tutorial::PersonRequest* /*request*/, ::tutorial::Person* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPerson(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListPersons : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListPersons() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListPersons() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPersons(::grpc::ServerContext* /*context*/, const ::tutorial::PersonRequest* /*request*/, ::grpc::ServerWriter< ::tutorial::Person>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListPersons(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPerson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPerson() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPerson(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPerson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPerson(::grpc::ServerContext* /*context*/, const ::tutorial::PersonRequest* /*request*/, ::tutorial::Person* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPerson(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListPersons : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListPersons() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->ListPersons(context, request); }));
    }
    ~WithRawCallbackMethod_ListPersons() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPersons(::grpc::ServerContext* /*context*/, const ::tutorial::PersonRequest* /*request*/, ::grpc::ServerWriter< ::tutorial::Person>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ListPersons(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPerson : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPerson() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tutorial::PersonRequest, ::tutorial::Person>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tutorial::PersonRequest, ::tutorial::Person>* streamer) {
                       return this->StreamedGetPerson(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPerson() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPerson(::grpc::ServerContext* /*context*/, const ::tutorial::PersonRequest* /*request*/, ::tutorial::Person* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPerson(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tutorial::PersonRequest,::tutorial::Person>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetPerson<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ListPersons : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ListPersons() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::tutorial::PersonRequest, ::tutorial::Person>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::tutorial::PersonRequest, ::tutorial::Person>* streamer) {
                       return this->StreamedListPersons(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ListPersons() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListPersons(::grpc::ServerContext* /*context*/, const ::tutorial::PersonRequest* /*request*/, ::grpc::ServerWriter< ::tutorial::Person>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedListPersons(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::tutorial::PersonRequest,::tutorial::Person>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ListPersons<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetPerson<WithSplitStreamingMethod_ListPersons<Service > > StreamedService;
};

}  // namespace tutorial


#endif  // GRPC_addressbook_2eproto__INCLUDED
